// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  role             UserRole          @default(customer)
  bookings         Booking[]
  reviewAndRatings ReviewAndRating[]
  feedbacks        Feedback[]

  @@map("users")
}

enum UserRole {
  super_admin
  admin
  customer
}

model Category {
  id        String    @id @default(uuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]

  @@map("category")
}

model Service {
  id               String            @id @default(uuid())
  title            String
  description      String
  price            Int
  img              String?
  availability     Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  categoryId       String
  category         Category          @relation(fields: [categoryId], references: [id])
  reviewAndRatings ReviewAndRating[]
  bookingServices  BookingService[]
}

model Booking {
  id              String           @id @default(uuid())
  userId          String
  status          BookingStatus    @default(Pending)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])
  bookingServices BookingService[]
}

model BookingService {
  id          String   @id @default(uuid())
  bookingId   String
  serviceId   String
  bookingDate String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  booking     Booking  @relation(fields: [bookingId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])

  @@map("booking_service")
}

enum BookingStatus {
  Pending
  Accepted
  Cancelled
}

// Review model for user reviews and ratings
model ReviewAndRating {
  id        String   @id @default(uuid())
  rating    Int
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  serviceId String
  user      User     @relation(fields: [userId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])

  @@map("review_and_rating")
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
